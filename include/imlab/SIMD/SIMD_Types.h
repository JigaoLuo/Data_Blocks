// ---------------------------------------------------------------------------------------------------
// IMLAB
// ---------------------------------------------------------------------------------------------------
/**
 @file
 This file contains some SIMD need type as constexpt
*/
#ifndef INCLUDE_IMLAB_SIMD_SIMD_TYPES_H_
#define INCLUDE_IMLAB_SIMD_SIMD_TYPES_H_
// ---------------------------------------------------------------------------------------------------
#include <stddef.h>
#include <cstdint>
// ---------------------------------------------------------------------------------------------------
namespace imlab {
namespace SIMD {
// ---------------------------------------------------------------------------------------------------
/// Byte1 Constants
constexpr uint32_t SIMD_WIDTH_BYTE1 = 32;

constexpr uint32_t SIMD_WIDTH_BYTE1_LOG2 = 5;

constexpr uint32_t SIMD_WIDTH_BYTE1_LOG2_REDUCE = 3;  /// at reduce (non first scan), each time process 8 uint8_t

constexpr size_t SIMD_ITERATION_BYTE1 = 4;
// ---------------------------------------------------------------------------------------------------
/// Byte2 Constants
constexpr uint32_t SIMD_WIDTH_BYTE2 = 16;

constexpr uint32_t SIMD_WIDTH_BYTE2_LOG2 = 4;

constexpr uint32_t SIMD_WIDTH_BYTE2_LOG2_MUL_SIZE = 5;   /// 2 * simdWidth ||| 2 = sizeof(uint16_t)

constexpr uint32_t SIMD_WIDTH_BYTE2_LOG2_REDUCE = 3;  /// at reduce (non first scan), each time process 8 uint16_t

constexpr size_t SIMD_ITERATION_BYTE2 = 2;
// ---------------------------------------------------------------------------------------------------
/// Byte4 Constants
constexpr uint32_t SIMD_WIDTH_BYTE4 = 8;

constexpr uint32_t SIMD_WIDTH_BYTE4_LOG2 = 3;

constexpr uint32_t SIMD_WIDTH_BYTE4_LOG2_MUL_SIZE = 5;   /// 4 * simdWidth ||| 4 = sizeof(uint32_t)

constexpr size_t SIMD_ITERATION_BYTE4 = 1;
// ---------------------------------------------------------------------------------------------------
/// Byte4 Constants
constexpr uint32_t SIMD_WIDTH_BYTE8 = 4;

constexpr uint32_t SIMD_WIDTH_BYTE8_LOG2 = 2;

constexpr uint32_t SIMD_WIDTH_BYTE8_LOG2_MUL_SIZE = 5;   /// 8 * simdWidth ||| 3 = sizeof(uint32_t)

/// Plus 1: because each iteration consume 4 entries
/// We have to halt iteration time, let each iteration consume 8 entries
constexpr uint32_t SIMD_WIDTH_BYTE8_LOG2_MUL_SIZE_PLUS1 = 6;

constexpr size_t SIMD_ITERATION_BYTE8 = 1;
// ---------------------------------------------------------------------------------------------------
/// A helper function for calculation how many matchs exits in the bitMask
/// A Match is just represented by 1 in uint32_t
///
/// Will be used for match vector resize(...)
///
/// @param bitMask bitmask generated by (SIMD Compare function + _mm256_movemask_epi8)
void calculate_match_counter(uint32_t bitMask, size_t* match_counter);
// ---------------------------------------------------------------------------------------------------
}  // namespace SIMD
// ---------------------------------------------------------------------------------------------------
}  // namespace imlab
// ---------------------------------------------------------------------------------------------------
#endif  // INCLUDE_IMLAB_SIMD_SIMD_TYPES_H_
// ---------------------------------------------------------------------------------------------------


